document.addEventListener("DOMContentLoaded", async () => {
    const token = localStorage.getItem("accessToken");
    console.log("Token from localStorage:", token); // Debug

    if (!token) {
        console.log("No token found, redirecting to login");
        window.location.href = "/SmartGarden/frontend-web/pages/login.html";
        return;
    }

    try {
        const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${token}`
            },
            body: new URLSearchParams({ 
                action: "check_login_status"
            })
        });
        const data = await res.json();
        console.log("Check login status response:", data); // Debug

        if (!data.success) {
            console.log("Login status check failed, redirecting to login");
            localStorage.removeItem('accessToken');
            window.location.href = "/SmartGarden/frontend-web/pages/login.html";
            return;
        }

        // L∆∞u tr·∫°ng th√°i admin
        const isAdmin = data.data.user.is_admin;
        localStorage.setItem('isAdmin', isAdmin);
        localStorage.setItem('currentUserId', data.data.user.id);

        initMap();
        loadUsers(isAdmin);
        loadGardens();
        setupImagePreview(isAdmin);
        setupFormHandlers(isAdmin);
        initChart();
    } catch (err) {
        console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p:", err);
        localStorage.removeItem('accessToken');
        window.location.href = "/SmartGarden/frontend-web/pages/login.html";
    }
});

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u garden_id hi·ªán t·∫°i
let currentGardenId = null;

// H√†m l·∫•y ·∫£nh qua POST v√† tr·∫£ v·ªÅ blob URL
async function getGardenImageBlobUrl(gardenId) {
    try {
        const token = localStorage.getItem("accessToken");
        const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${token}`
            },
            body: new URLSearchParams({
                action: "get_garden_image",
                id: gardenId
            })
        });
        if (!res.ok) {
            console.error(`L·ªói l·∫•y ·∫£nh cho v∆∞·ªùn ${gardenId}: HTTP ${res.status}`);
            return '';
        }
        const blob = await res.blob();
        if (blob.type.startsWith('image/')) {
            return URL.createObjectURL(blob);
        } else {
            const text = await res.text();
            console.error(`Ph·∫£n h·ªìi kh√¥ng ph·∫£i ·∫£nh cho v∆∞·ªùn ${gardenId}: ${text}`);
            return '';
        }
    } catch (err) {
        console.error(`L·ªói khi l·∫•y ·∫£nh cho v∆∞·ªùn ${gardenId}:`, err);
        return '';
    }
}

// ================== B·∫£n ƒë·ªì ==================
let map, addMode = false, tempMarker = null, realMarker = null;

function initMap() {
    map = L.map("map").setView([10.0125, 105.0809], 12);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(map);

    addAddGardenButton();
    setupMapMouseEvents();
    setupMapClickEvent();
}

function addAddGardenButton() {
    const addIcon = L.control({ position: "topleft" });
    addIcon.onAdd = () => {
        const div = L.DomUtil.create("div", "map-button");
        div.innerHTML = "üå±";
        div.title = "Th√™m v∆∞·ªùn c√¢y";
        L.DomEvent.disableClickPropagation(div);
        div.onclick = () => {
            addMode = !addMode;
            div.style.backgroundColor = addMode ? "#28a745" : "";
            if (!addMode && tempMarker) {
                map.removeLayer(tempMarker);
                tempMarker = null;
            }
            console.log("addMode:", addMode); 
        };
        return div;
    };
    addIcon.addTo(map);
}

function setupMapMouseEvents() {
    map.on("mousemove", function handler(e) {
        if (!addMode) return;
        if (!tempMarker) {
            tempMarker = L.circleMarker(e.latlng, { color: "green", radius: 3, fillOpacity: 1 }).addTo(map);
        } else {
            tempMarker.setLatLng(e.latlng);
        }
    });
}

function setupMapClickEvent() {
    map.on("click", function handler(e) {
        if (!addMode) return;
        const lat = e.latlng.lat.toFixed(6);
        const lng = e.latlng.lng.toFixed(6);
        if (tempMarker) {
            map.removeLayer(tempMarker);
            tempMarker = null;
        }
        map.flyTo([lat, lng], 16, { animate: true });
        if (realMarker) map.removeLayer(realMarker);
        realMarker = L.marker([lat, lng]).addTo(map);
        document.getElementById("latitude").value = lat;
        document.getElementById("longitude").value = lng;
        
        const popup = document.getElementById("gardenFormPopup");
        popup.classList.add("show");
        document.getElementById("map").classList.add("popup-active");
        
        map.off("mousemove");
        map.off("click");
        
        addMode = false;
        const addButton = document.querySelector(".map-button");
        if (addButton) addButton.style.backgroundColor = "";
    });
}

// ================== D·ªØ li·ªáu c·∫£m bi·∫øn ==================
async function loadSensorData(garden_id = currentGardenId) {
    try {
        const token = localStorage.getItem("accessToken");
        const body = new URLSearchParams({ action: "get_sensor_data" });
        if (garden_id) body.append("garden_id", garden_id);
        const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${token}`
            },
            body: body
        });
        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
        const data = await res.json();
        if (data.success) {
            const sensorDataDiv = document.getElementById("sensorData");
            if (sensorDataDiv) {
                sensorDataDiv.innerHTML = "";
                if (garden_id && data.data[garden_id]) {
                    const sensor = data.data[garden_id];
                    sensorDataDiv.innerHTML = `
                        <div>
                            <p><strong>Nhi·ªát ƒë·ªô:</strong> <span id="temperature">${sensor.temperature} ¬∞C</span></p>
                            <p><strong>ƒê·ªô ·∫©m ƒë·∫•t:</strong> <span id="soilMoisture">${sensor.soil_moisture} %</span></p>
                            <p><strong>ƒê·ªô ·∫©m kh√¥ng kh√≠:</strong> <span id="humidity">${sensor.humidity} %</span></p>
                            <p><strong>Tr·∫°ng th√°i t∆∞·ªõi:</strong> <span id="irrigationStatus">${sensor.irrigation ? "ƒêang t∆∞·ªõi" : "Ch∆∞a t∆∞·ªõi"}</span></p>
                            <button id="toggleIrrigation" class="btn btn-outline-${sensor.irrigation ? "danger" : "success"} btn-sm">
                                ${sensor.irrigation ? "T·∫Øt t∆∞·ªõi" : "B·∫≠t t∆∞·ªõi"}
                            </button>
                        </div>
                    `;
                    document.getElementById("toggleIrrigation")?.addEventListener("click", toggleIrrigation);
                } else {
                    for (const [id, sensor] of Object.entries(data.data)) {
                        sensorDataDiv.innerHTML += `
                            <div>
                                <h5>V∆∞·ªùn ID: ${id}</h5>
                                <p><strong>Nhi·ªát ƒë·ªô:</strong> ${sensor.temperature} ¬∞C</p>
                                <p><strong>ƒê·ªô ·∫©m ƒë·∫•t:</strong> ${sensor.soil_moisture} %</p>
                                <p><strong>ƒê·ªô ·∫©m kh√¥ng kh√≠:</strong> ${sensor.humidity} %</p>
                                <p><strong>Tr·∫°ng th√°i t∆∞·ªõi:</strong> ${sensor.irrigation ? "ƒêang t∆∞·ªõi" : "Ch∆∞a t∆∞·ªõi"}</p>
                            </div>
                        `;
                    }
                }
            }
        } else {
            console.error("L·ªói d·ªØ li·ªáu c·∫£m bi·∫øn:", data.message);
        }
    } catch (err) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu c·∫£m bi·∫øn:", err);
    }
}

// ================== Bi·ªÉu ƒë·ªì ==================
let envChart;

function initChart() {
    const ctx = document.getElementById("envChart")?.getContext("2d");
    if (!ctx) return;
    envChart = new Chart(ctx, {
        type: "line",
        data: {
            labels: [],
            datasets: [
                {
                    label: "Nhi·ªát ƒë·ªô (¬∞C)",
                    data: [],
                    borderColor: "#ff6384",
                    fill: false,
                },
                {
                    label: "ƒê·ªô ·∫©m ƒë·∫•t (%)",
                    data: [],
                    borderColor: "#36a2eb",
                    fill: false,
                },
                {
                    label: "ƒê·ªô ·∫©m kh√¥ng kh√≠ (%)",
                    data: [],
                    borderColor: "#4bc0c0",
                    fill: false,
                },
            ],
        },
        options: {
            responsive: true,
            scales: {
                x: { title: { display: true, text: "Th·ªùi gian" } },
                y: { title: { display: true, text: "Gi√° tr·ªã" } },
            },
        },
    });
}

async function loadChartData(garden_id = currentGardenId) {
    try {
        const token = localStorage.getItem("accessToken");
        const body = new URLSearchParams({ action: "get_chart_data" });
        if (garden_id) body.append("garden_id", garden_id);
        const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${token}`
            },
            body: body
        });
        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
        const data = await res.json();
        if (data.success && envChart) {
            if (garden_id && data.data[garden_id]) {
                envChart.data.labels = data.data[garden_id].labels;
                envChart.data.datasets[0].data = data.data[garden_id].temperature;
                envChart.data.datasets[1].data = data.data[garden_id].soil_moisture;
                envChart.data.datasets[2].data = data.data[garden_id].humidity;
                envChart.update();
            } else {
                envChart.data.labels = [];
                envChart.data.datasets[0].data = [];
                envChart.data.datasets[1].data = [];
                envChart.data.datasets[2].data = [];
                envChart.update();
                console.log("Vui l√≤ng ch·ªçn m·ªôt v∆∞·ªùn ƒë·ªÉ xem bi·ªÉu ƒë·ªì");
            }
        } else {
            console.error("L·ªói d·ªØ li·ªáu bi·ªÉu ƒë·ªì:", data.message);
        }
    } catch (err) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu bi·ªÉu ƒë·ªì:", err);
    }
}

// ================== C·∫£nh b√°o ==================
async function loadAlerts(garden_id = currentGardenId) {
    try {
        const token = localStorage.getItem("accessToken");
        const body = new URLSearchParams({ action: "get_alerts" });
        if (garden_id) body.append("garden_id", garden_id);
        const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${token}`
            },
            body: body
        });
        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
        const data = await res.json();
        const alertsList = document.getElementById("alertsList");
        if (alertsList) {
            alertsList.innerHTML = "";
            if (data.success) {
                if (garden_id && data.data[garden_id]) {
                    data.data[garden_id].forEach(alert => {
                        const li = document.createElement("li");
                        li.className = `list-group-item list-group-item-${alert.severity}`;
                        li.textContent = alert.message;
                        alertsList.appendChild(li);
                    });
                } else {
                    for (const [id, alerts] of Object.entries(data.data)) {
                        const li = document.createElement("li");
                        li.className = "list-group-item";
                        li.innerHTML = `<strong>V∆∞·ªùn ID: ${id}</strong>`;
                        alerts.forEach(alert => {
                            const subLi = document.createElement("li");
                            subLi.className = `list-group-item list-group-item-${alert.severity}`;
                            subLi.textContent = alert.message;
                            li.appendChild(subLi);
                        });
                        alertsList.appendChild(li);
                    };
                }
                if (alertsList.innerHTML === "") {
                    alertsList.innerHTML = `<li class="list-group-item">Kh√¥ng c√≥ c·∫£nh b√°o</li>`;
                }
            } else {
                console.error("L·ªói d·ªØ li·ªáu c·∫£nh b√°o:", data.message);
            }
        }
    } catch (err) {
        console.error("L·ªói khi t·∫£i c·∫£nh b√°o:", err);
    }
}

// ================== Ki·ªÉm so√°t t∆∞·ªõi ti√™u ==================
async function toggleIrrigation() {
    if (!currentGardenId) {
        alert("Vui l√≤ng ch·ªçn m·ªôt v∆∞·ªùn ƒë·ªÉ ƒëi·ªÅu khi·ªÉn t∆∞·ªõi!");
        return;
    }
    try {
        const token = localStorage.getItem("accessToken");
        const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${token}`
            },
            body: new URLSearchParams({ 
                action: "toggle_irrigation",
                garden_id: currentGardenId
            })
        });
        const data = await res.json();
        if (data.success) {
            loadSensorData(currentGardenId);
        } else {
            alert("L·ªói khi ƒëi·ªÅu khi·ªÉn t∆∞·ªõi: " + data.message);
        }
    } catch (err) {
        console.error("L·ªói khi ƒëi·ªÅu khi·ªÉn t∆∞·ªõi:", err);
        alert("Kh√¥ng th·ªÉ ƒëi·ªÅu khi·ªÉn t∆∞·ªõi!");
    }
}

// ================== C√°c ch·ª©c nƒÉng hi·ªán c√≥ ==================
async function loadUsers(isAdmin) {
    if (!isAdmin) {
        // N·∫øu kh√¥ng ph·∫£i admin, ·∫©n ph·∫ßn ch·ªçn ng∆∞·ªùi d√πng
        const ownerSelect = document.getElementById("owner_name");
        if (ownerSelect) {
            ownerSelect.parentElement.style.display = 'none';
        }
        return;
    }

    try {
        const token = localStorage.getItem("accessToken");
        const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${token}`
            },
            body: new URLSearchParams({ action: "get_users" })
        });
        const data = await res.json();
        if (data.success && Array.isArray(data.users)) {
            const select = document.getElementById("owner_name");
            if (select) {
                select.innerHTML = '<option value="">Ch·ªçn ch·ªß v∆∞·ªùn</option>';
                data.users.forEach(user => {
                    const option = document.createElement("option");
                    option.value = user.id;
                    option.textContent = user.full_name;
                    select.appendChild(option);
                });
            }
        } else {
            console.error("L·ªói d·ªØ li·ªáu ng∆∞·ªùi d√πng:", data.message);
        }
    } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", err);
    }
}

async function loadGardens() {
    try {
        const token = localStorage.getItem("accessToken");
        console.log("G·ª≠i y√™u c·∫ßu get_gardens...");
        const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${token}`
            },
            body: new URLSearchParams({ action: "get_gardens" })
        });
        console.log("Tr·∫°ng th√°i HTTP:", res.status, res.statusText);
        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
        const text = await res.text();
        console.log("Ph·∫£n h·ªìi t·ª´ API get_gardens:", text);
        if (!text) throw new Error("Ph·∫£n h·ªìi API r·ªóng");
        let data;
        try {
            data = JSON.parse(text);
        } catch (e) {
            throw new Error("L·ªói ph√¢n t√≠ch JSON: " + e.message + "\nPh·∫£n h·ªìi: " + text);
        }
        if (data.success && Array.isArray(data.gardens)) {
            const gardenSelect = document.createElement("select");
            gardenSelect.id = "gardenSelect";
            gardenSelect.className = "form-control mb-3";
            gardenSelect.innerHTML = '<option value="">T·∫•t c·∫£ v∆∞·ªùn</option>';
            data.gardens.forEach(g => {
                const option = document.createElement("option");
                option.value = g.id;
                option.textContent = g.garden_names;
                gardenSelect.appendChild(option);
            });

            const mapContainer = document.getElementById("map");
            if (mapContainer && mapContainer.parentNode) {
                mapContainer.parentNode.insertBefore(gardenSelect, mapContainer);
            }

            gardenSelect.addEventListener("change", async (e) => {
                currentGardenId = e.target.value ? parseInt(e.target.value) : null;
                await loadSensorData(currentGardenId);
                await loadChartData(currentGardenId);
                await loadAlerts(currentGardenId);
                const garden = data.gardens.find(g => g.id == currentGardenId);
                if (garden) {
                    const lat = parseFloat(garden.latitude);
                    const lng = parseFloat(garden.longitude);
                    if (!isNaN(lat) && !isNaN(lng)) {
                        map.flyTo([lat, lng], 16, { animate: true });
                    }
                }
            });

            for (const g of data.gardens) {
                const lat = parseFloat(g.latitude);
                const lng = parseFloat(g.longitude);
                if (!isNaN(lat) && !isNaN(lng)) {
                    // L·∫•y blob URL cho ·∫£nh
                    const imgSrc = g.img_url && g.img_id ? await getGardenImageBlobUrl(g.img_id) : '';
                    L.marker([lat, lng])
                        .addTo(map)
                        .bindPopup(`
                            <b>${g.garden_names}</b><br>
                            Ch·ªß v∆∞·ªùn: ${g.owner_name || "Kh√¥ng x√°c ƒë·ªãnh"}<br>
                            ƒê·ªãa ch·ªâ: ${g.location || "Kh√¥ng c√≥"}<br>
                            Di·ªán t√≠ch: ${g.area || 0} m¬≤<br>
                            Ghi ch√∫: ${g.note || "Kh√¥ng c√≥"}<br>
                            ${imgSrc ? `<img src="${imgSrc}" style="max-width:100px;" onerror="this.style.display='none'">` : ""}
                        `)
                        .on("click", () => {
                            currentGardenId = g.id;
                            gardenSelect.value = g.id;
                            loadSensorData(currentGardenId);
                            loadChartData(currentGardenId);
                            loadAlerts(currentGardenId);
                            map.flyTo([lat, lng], 16, { animate: true });
                        });
                } else {
                    console.warn(`V∆∞·ªùn ${g.garden_names} (ID: ${g.id}) c√≥ t·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá: lat=${g.latitude}, lng=${g.longitude}`);
                }
            }

            if (!currentGardenId) {
                loadSensorData();
                loadAlerts();
            }

            if (data.gardens.length === 0) {
                console.log("Kh√¥ng c√≥ v∆∞·ªùn ho·∫°t ƒë·ªông n√†o ƒë∆∞·ª£c t√¨m th·∫•y");
            }
        } else {
            console.error("L·ªói d·ªØ li·ªáu v∆∞·ªùn:", data.message || "Kh√¥ng c√≥ d·ªØ li·ªáu v∆∞·ªùn");
        }
    } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch v∆∞·ªùn:", err);
        const mapContainer = document.getElementById("map");
        if (mapContainer) {
            const errorDiv = document.createElement("div");
            errorDiv.className = "alert alert-danger";
            errorDiv.textContent = "Kh√¥ng th·ªÉ t·∫£i danh s√°ch v∆∞·ªùn. Vui l√≤ng th·ª≠ l·∫°i sau.";
            mapContainer.parentNode.insertBefore(errorDiv, mapContainer);
        }
    }
}

function setupImagePreview(isAdmin) {
    const fileInput = document.getElementById("image_url");
    const preview = document.getElementById("imagePreview");
    if (fileInput && preview) {
        fileInput.addEventListener("change", () => {
            const file = fileInput.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = e => {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                preview.src = "";
                preview.style.display = 'none';
            }
        });
    }
}

function setupFormHandlers(isAdmin) {
    const closePopup = document.getElementById("closePopup");
    if (closePopup) {
        closePopup.onclick = () => {
            const popup = document.getElementById("gardenFormPopup");
            if (popup) {
                popup.classList.remove("show");
            }
            document.getElementById("map")?.classList.remove("popup-active");
            if (realMarker) {
                map.removeLayer(realMarker);
                realMarker = null;
            }
            if (tempMarker) {
                map.removeLayer(tempMarker);
                tempMarker = null;
            }
            addMode = false;
            const addButton = document.querySelector(".map-button");
            if (addButton) addButton.style.backgroundColor = "";
            
            setupMapMouseEvents();
            setupMapClickEvent();
        };
    }

    const saveGardenBtn = document.getElementById("saveGardenBtn");
    if (saveGardenBtn) {
        saveGardenBtn.onclick = async () => {
            const token = localStorage.getItem("accessToken");
            const name = document.getElementById("garden_names")?.value.trim();
            const owner = isAdmin ? document.getElementById("owner_name")?.value : localStorage.getItem('currentUserId');
            const address = document.getElementById("location")?.value.trim();
            const area = document.getElementById("area")?.value;
            const note = document.getElementById("note")?.value.trim();
            const lat = document.getElementById("latitude")?.value;
            const lng = document.getElementById("longitude")?.value;
            const fileInput = document.getElementById("image_url");
            const imageFile = fileInput?.files[0];

            if (!name || !owner || !address || !area || !lat || !lng) {
                alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!");
                return;
            }

            const formData = new FormData();
            formData.append("action", "save_garden");
            formData.append("name", name);
            formData.append("owner_name", owner);
            formData.append("location", address);
            formData.append("area", area);
            formData.append("note", note);
            formData.append("latitude", lat);
            formData.append("longitude", lng);
            if (imageFile) formData.append("image", imageFile);

            try {
                const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${token}`
                    },
                    body: formData
                });
                const data = await res.json();
                if (data.success) {
                    alert("‚úÖ Th√™m v∆∞·ªùn c√¢y th√†nh c√¥ng!");
                    window.location.reload();
                } else {
                    alert("‚ùå Th√™m v∆∞·ªùn c√¢y th·∫•t b·∫°i!\nL√Ω do: " + data.message);
                }
            } catch (err) {
                console.error("L·ªói khi l∆∞u v∆∞·ªùn c√¢y:", err);
                alert("‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu!");
            }
        };
    }
}

async function logout() {
    try {
        const token = localStorage.getItem("accessToken");
        const res = await fetch("http://localhost/SmartGarden/backend-api/routes/home.php", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${token}`
            },
            body: new URLSearchParams({ action: "logout" })
        });
        const data = await res.json();
        if (!data.success) {
            console.error("L·ªói ƒëƒÉng xu·∫•t t·ª´ server:", data.message);
        }

        localStorage.removeItem("accessToken");
        localStorage.removeItem("isAdmin");
        localStorage.removeItem("currentUserId");
        sessionStorage.clear();
        window.location.href = "/SmartGarden/frontend-web/pages/login.html";
    } catch (err) {
        console.error("L·ªói khi ƒëƒÉng xu·∫•t:", err);
        localStorage.removeItem("accessToken");
        localStorage.removeItem("isAdmin");
        localStorage.removeItem("currentUserId");
        sessionStorage.clear();
        window.location.href = "/SmartGarden/frontend-web/pages/login.html";
    }
}